name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: 환경변수 설정
        run: echo "${{ secrets.MY_APPLICATION_PROPERTIES}}" > ./src/main/resources/application.properties
        working-directory: /home/runner/work/orderApp13/orderApp13

      # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
      # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0

      - name: bootJar with Gradle Wrapper
        run: ./gradlew bootJar

      # Docker build & Push
      - name: Docker build & push to Docker hub
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/docker-test .
          docker push ${{ secrets.DOCKER_USERNAME }}/docker-test

      - name: chmod setting
        run: |
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh 
          
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > ~/.ssh/orderapp13.pem 
          chmod 600 ~/.ssh/orderapp13.pem
          ls -l ~/.ssh

      # EC2 배포
      - name: Docker image pull & Deploy to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/orderapp13.pem ec2-user@ec2-3-27-216-195.ap-southeast-2.compute.amazonaws.com
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
          hostname -f
          if [ "$(sudo docker ps -a -q)" ]; then
            sudo docker stop $(sudo docker ps -a -q)
          else
            echo "No containers to stop."
          fi
          sudo docker run -d --log-driver=syslog -p 5432:5432 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
#          if [ "$(sudo docker ps --filter 'status=exited' -a -q)" ]; then
#            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
#          else
#            echo "No containers to stop."
#          fi
#          sudo docker image prune -a -f

#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
#          username: ubuntu
#          key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
#          # 도커 작업
#          script: |
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
#            sudo docker stop $(sudo docker ps -a -q)
#            sudo docker run -d --log-driver=syslog -p 5432:5432 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
#            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
#            sudo docker image prune -a -f

#      # EC2 배포
#      - name: Docker image pull & Deploy to EC2
#        uses: appleboy/ssh-action@master
#        with:
#          host: ${{ secrets.EC2_HOST }} # EC2 인스턴스 퍼블릭 DNS
#          username: ubuntu
#          key: ${{ secrets.EC2_PRIVATE_KEY }} # pem 키
#          # 도커 작업
#          script: |
#            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
#            sudo docker stop $(sudo docker ps -a -q)
#            sudo docker run -d --log-driver=syslog -p 5432:5432 ${{ secrets.DOCKER_USERNAME }}/docker-test:latest
#            sudo docker rm $(sudo docker ps --filter 'status=exited' -a -q)
#            sudo docker image prune -a -f